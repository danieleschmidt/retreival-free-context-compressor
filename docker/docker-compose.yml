# Docker Compose configuration for Retrieval-Free Context Compressor
version: '3.8'

services:
  # Main application service
  retrieval-free:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
      args:
        BUILD_VERSION: "0.1.0"
        BUILD_DATE: "2025-08-04T13:50:00Z"
        VCS_REF: "main"
    image: retrieval-free:latest
    container_name: retrieval-free-app
    restart: unless-stopped
    
    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - RETRIEVAL_FREE_LOG_LEVEL=INFO
      - RETRIEVAL_FREE_WORKERS=4
      - RETRIEVAL_FREE_MAX_MEMORY=4096
      
    # Volumes
    volumes:
      - app-data:/app/data
      - app-cache:/app/cache
      - app-logs:/app/logs
      - ./config:/app/config:ro
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.retrieval_free.monitoring import HealthChecker; hc = HealthChecker(); result = hc.get_overall_health(); exit(0 if result['healthy'] else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Networks
    networks:
      - retrieval-free-network
    
    # Depends on monitoring stack
    depends_on:
      - prometheus
      - grafana

  # Development service
  retrieval-free-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    image: retrieval-free:dev
    container_name: retrieval-free-dev
    profiles: ["dev"]
    
    environment:
      - RETRIEVAL_FREE_LOG_LEVEL=DEBUG
      
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - dev-data:/app/data
      - dev-cache:/app/cache
      
    networks:
      - retrieval-free-network
    
    # Keep container running
    tty: true
    stdin_open: true

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: retrieval-free-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules/:/etc/prometheus/rules/:ro
      - prometheus-data:/prometheus
      
    ports:
      - "9090:9090"
      
    networks:
      - retrieval-free-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:9.2.0
    container_name: retrieval-free-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
      
    ports:
      - "3000:3000"
      
    networks:
      - retrieval-free-network
    
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.7.0
    container_name: retrieval-free-loki
    restart: unless-stopped
    
    command: -config.file=/etc/loki/local-config.yaml
    
    volumes:
      - ../monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
      
    ports:
      - "3100:3100"
      
    networks:
      - retrieval-free-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.7.0
    container_name: retrieval-free-promtail
    restart: unless-stopped
    
    command: -config.file=/etc/promtail/config.yml
    
    volumes:
      - ../monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - app-logs:/var/log/retrieval-free:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      
    networks:
      - retrieval-free-network
    
    depends_on:
      - loki

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: retrieval-free-redis
    restart: unless-stopped
    profiles: ["cache"]
    
    command: redis-server --appendonly yes --requirepass redis123
    
    volumes:
      - redis-data:/data
      
    ports:
      - "6379:6379"
      
    networks:
      - retrieval-free-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # PostgreSQL for metadata storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: retrieval-free-postgres
    restart: unless-stopped
    profiles: ["database"]
    
    environment:
      - POSTGRES_DB=retrieval_free
      - POSTGRES_USER=retrieval_free
      - POSTGRES_PASSWORD=postgres123
      
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      
    ports:
      - "5432:5432"
      
    networks:
      - retrieval-free-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U retrieval_free"]
      interval: 10s
      timeout: 5s
      retries: 5

# Networks
networks:
  retrieval-free-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Application volumes
  app-data:
    driver: local
  app-cache:
    driver: local
  app-logs:
    driver: local
  
  # Development volumes
  dev-data:
    driver: local
  dev-cache:
    driver: local
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  
  # Optional service volumes
  redis-data:
    driver: local
  postgres-data:
    driver: local