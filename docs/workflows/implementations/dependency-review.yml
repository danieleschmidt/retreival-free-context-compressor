name: Dependency Review

on:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-dependencies-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0
          comment-summary-in-pr: always

  vulnerability-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=audit-results.json --progress-spinner=off
          
      - name: Run bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-results.json || true
          
      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: |
            audit-results.json
            bandit-results.json
            
      - name: Check for critical vulnerabilities
        run: |
          if [ -f audit-results.json ]; then
            # Check if any critical vulnerabilities were found
            CRITICAL=$(python -c "
            import json
            with open('audit-results.json') as f:
                data = json.load(f)
            vulnerabilities = data.get('vulnerabilities', [])
            critical_vulns = [v for v in vulnerabilities if v.get('severity', '').lower() in ['critical', 'high']]
            print(len(critical_vulns))
            ")
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL critical/high severity vulnerabilities"
              echo "Please review and address these vulnerabilities before merging"
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                echo "::error::Critical vulnerabilities found in dependencies"
                exit 1
              fi
            else
              echo "✅ No critical vulnerabilities found"
            fi
          fi

  license-check:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pip-licenses
          
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for problematic licenses
          python -c "
          import json
          with open('licenses.json') as f:
              licenses = json.load(f)
          
          problematic = ['GPL-2.0', 'GPL-3.0', 'LGPL-2.0', 'LGPL-2.1', 'LGPL-3.0', 'AGPL-3.0']
          found_problematic = []
          
          for pkg in licenses:
              license_name = pkg.get('License', 'Unknown')
              if any(prob in license_name for prob in problematic):
                  found_problematic.append(f'{pkg[\"Name\"]} ({license_name})')
          
          if found_problematic:
              print('❌ Found packages with problematic licenses:')
              for pkg in found_problematic:
                  print(f'  - {pkg}')
              exit(1 if '${{ github.event_name }}' == 'pull_request' else 0)
          else:
              print('✅ All licenses are compatible')
          "
          
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json