name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: twine check dist/*
        
      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py requirements --format json --output sbom.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            dist/
            sbom.json

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/retrieval-free
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
          
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'dist/*'

  github-release:
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          
      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog from recent commits
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.tmp
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> CHANGELOG.tmp
          else
            echo "## Initial Release" > CHANGELOG.tmp
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.tmp
          fi
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release v${{ steps.changelog.outputs.version }}"
          body_path: CHANGELOG.tmp
          files: |
            dist/*
            sbom.json
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true