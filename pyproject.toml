[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "retrieval-free-context-compressor"
version = "0.1.0"
description = "A transformer plug-in that compresses long documents into dense mega-tokens"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
keywords = ["compression", "transformers", "context", "nlp", "ai", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.3.0",
    "transformers>=4.40.0",
    "einops>=0.7.0",
    "scikit-learn>=1.3.0",
    "sentence-transformers>=3.0.0",
    "datasets>=2.19.0",
    "numpy>=1.24.0",
    "tqdm>=4.65.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "ipython>=8.12.0",
    "jupyter>=1.0.0"
]
gpu = [
    "flash-attn>=2.5.0",
    "faiss-gpu>=1.7.4"
]
optimization = [
    "apex>=0.1; platform_system != 'Windows'",
    "deepspeed>=0.14.0",
    "bitsandbytes>=0.43.0"
]
evaluation = [
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "sacrebleu>=2.3.0"
]
monitoring = [
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    "rich>=13.0.0",
    "matplotlib>=3.7.0"
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "cryptography>=41.0.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.23.0"
]
all = [
    "retrieval-free-context-compressor[dev,gpu,optimization,evaluation,monitoring,security,docs]"
]

[project.urls]
Homepage = "https://github.com/yourusername/retrieval-free-context-compressor"
Documentation = "https://retrieval-free.readthedocs.io"
Repository = "https://github.com/yourusername/retrieval-free-context-compressor"
Issues = "https://github.com/yourusername/retrieval-free-context-compressor/issues"
Changelog = "https://github.com/yourusername/retrieval-free-context-compressor/blob/main/CHANGELOG.md"

[project.scripts]
rfcc = "retrieval_free.cli:main"
rfcc-server = "retrieval_free.server:main"
rfcc-train = "retrieval_free.training.cli:main"
rfcc-eval = "retrieval_free.evaluation.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=retrieval_free",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "benchmark: marks tests as performance benchmarks",
    "security: marks tests as security tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "src/retrieval_free/cli.py",
    "src/retrieval_free/__main__.py"
]
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S311",  # standard pseudo-random generators are not suitable for security/cryptographic purposes
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101", "ARG", "SIM"]
"scripts/**/*" = ["T20"]

[tool.ruff.isort]
known-first-party = ["retrieval_free"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "faiss.*",
    "sentence_transformers.*",
    "flash_attn.*",
    "apex.*",
    "deepspeed.*",
    "bitsandbytes.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]