[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "retrieval-free-context-compressor"
version = "0.1.0"
description = "A transformer plug-in that compresses long documents into dense mega-tokens"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
keywords = ["compression", "transformers", "context", "nlp", "ai", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.3.0",
    "transformers>=4.40.0",
    "einops>=0.7.0",
    "scikit-learn>=1.3.0",
    "sentence-transformers>=3.0.0",
    "datasets>=2.19.0",
    "numpy>=1.24.0",
    "tqdm>=4.65.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0"
]
gpu = [
    "flash-attn>=2.5.0",
    "faiss-gpu>=1.7.4"
]
optimization = [
    "apex>=0.1",
    "deepspeed>=0.14.0",
    "bitsandbytes>=0.43.0"
]
evaluation = [
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13"
]
all = [
    "retrieval-free-context-compressor[dev,gpu,optimization,evaluation]"
]

[project.urls]
Homepage = "https://github.com/yourusername/retrieval-free-context-compressor"
Documentation = "https://retrieval-free.readthedocs.io"
Repository = "https://github.com/yourusername/retrieval-free-context-compressor"
Issues = "https://github.com/yourusername/retrieval-free-context-compressor/issues"

[project.scripts]
rfcc = "retrieval_free.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=retrieval_free",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU"
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",  
    "datasets.*",
    "faiss.*",
    "sentence_transformers.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]